<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Run test on common architecture (i386)</description>
  <logRotator>
    <daysToKeep>15</daysToKeep>
    <numToKeep>-1</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty>
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>master</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector"/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -eu
export LANG=en_US.UTF-8

WRKDIR={{ BASEDIR }}/work/{{ release }}/{{ stack }}
OPTS="{{ opts }}"

cd $WRKDIR

SKIPFILE=/tmp/autopilot.{{ release }}.{{ stack }}.check.run
if [ "$FORCE_PUBLICATION" = "true" ]  || [ "$AUTO_PUBLICATION" = "true" ]; then
    rm -f $SKIPFILE
    exit 0
fi

if [ -z "$(ls $WRKDIR/*.project 2&gt;/dev/null)" -a "$CHECK_WITH_WHOLE_PPA" != "true" ]; then
    rm -f $SKIPFILE
    echo "No new source uploaded to PPA and CHECK_WITH_WHOLE_PPA is not set.  Skipping check!"
    exit 0
else
    echo "RUN_AUTOPILOT=True" &gt; $SKIPFILE
    echo "CHECK_WITH_WHOLE_PPA=$CHECK_WITH_WHOLE_PPA" &gt;&gt; $SKIPFILE
fi

{{ BINDIR }}/watch-ppa $OPTS

</command>
    </hudson.tasks.Shell>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder>
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>{{ checkparameters }}</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
            <hudson.plugins.parameterizedtrigger.FileBuildParameters>
                <propertiesFile>/tmp/autopilot.{{ release }}.{{ stack }}.check.run</propertiesFile>
                <failTriggerOnMissing>true</failTriggerOnMissing>
            </hudson.plugins.parameterizedtrigger.FileBuildParameters>
          </configs>
          <projects>{{ extracheck }}</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
            </buildStepFailureThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
            </failureThreshold>
          </block>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -eu

if [ ! -e /tmp/autopilot.{{ release }}.{{ stack }}.check.run ]; then
    echo &quot;Autopilot tests skipped. Nothing to report!&quot;
    exit 0
fi

JOBROOT={{ extracheck }}

for card in {{ apmachines }}; do
    echo &quot;Calculating results for card $card&quot;
    JUNIT=$({{ BINDIR }}/latest_autopilot_results $JOBROOT $card)
    RET=$?

    if [ $RET -gt 0 ]; then
        echo &quot;Failed to find junit results for latest run, exiting!&quot;
        exit $RET
    fi

    AUTOPILOTRC={{ BASEDIR }}/history/{{ release }}/{{ stack }}.autopilotrc
    [ ! -e "$AUTOPILOTRC" ] &amp;&amp; AUTOPILOTRC={{ BASEDIR }}/default.autopilotrc
    {{ BINDIR }}/cu2d-autopilot-report -C $AUTOPILOTRC $JUNIT {{release}}/{{stack}}/$card
    RET=$?

    if [ $RET -gt 0 ]; then
        echo &quot;Tests for card &apos;$card&apos; failed!&quot;
        exit $RET
    fi
done</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.build__publisher.BuildPublisher>
      <publishUnstableBuilds>true</publishUnstableBuilds>
      <publishFailedBuilds>true</publishFailedBuilds>
      <postActions class="vector"/>
    </hudson.plugins.build__publisher.BuildPublisher>
  </publishers>
  <buildWrappers/>
</project>
