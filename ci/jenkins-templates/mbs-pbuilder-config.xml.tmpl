<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>&lt;B&gt;WARNING:&lt;/B&gt; This job is autogenerated. Any changes to the configuration will be lost.&lt;BR&gt;&#xd;
&lt;B&gt;PURPOSE:&lt;/B&gt; pbuilder job for {{target_branch}} {{ configuration }}&lt;BR&gt;&#xd;
&lt;B&gt;TEAM:&lt;/B&gt; {{irc_channel}}&lt;BR&gt;&#xd;
&lt;B&gt;POC:&lt;/B&gt; {{contact_email}}&lt;BR&gt;&#xd;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.queueSorter.PrioritySorterJobProperty>
      <priority>100</priority>
    </hudson.queueSorter.PrioritySorterJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>autolanding</name>
          <description>Specifies that this is an autolanding/merge job. Used to properly set package version string.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
{% for parameter in parameter_list %}
        <hudson.model.StringParameterDefinition>
          <name>{{ parameter.name }}</name>
          <description>{{ parameter.description }}</description>
          <defaultValue>{{ parameter.value }}</defaultValue>
        </hudson.model.StringParameterDefinition>
{% endfor %}
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>{{ node_label }}</assignedNode>
  <canRoam>false</canRoam>
  <disabled>{{ disabled }}</disabled>
  <blockBuildWhenDownstreamBuilding>true</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector"/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>{{ acquire_hook_script }}</command>
    </hudson.tasks.Shell>
    <com.ubuntu.builder.PBuilderPlugin>
      <hooks>$hooks</hooks>
      <mainBranch>$source_branch</mainBranch>
      <packagingBranch></packagingBranch>
      <targetBranch>$target_branch</targetBranch>
      <extraHookDir>{{ hook_location }}</extraHookDir>
      <parallelJobs>{{ parallel_jobs }}</parallelJobs>
      <distroArch>{{ configuration }}</distroArch>
    </com.ubuntu.builder.PBuilderPlugin>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
set -x

if [ -z &quot;${autolanding}&quot; ]; then
    # Build was not triggered by autolanding, don't save the build artifacts
    exit 0
fi

tmp_dir=&quot;${local_archive_tmp}/${project}-al-${local_archive_pocket}-${BUILD_NUMBER}&quot;

# mkdir &quot;${tmp_dir}&quot; can fail due to multiple jobs attempting to create the directory
ssh ${local_archive_login}@${local_archive_host} mkdir &quot;${tmp_dir}&quot; || true
ssh ${local_archive_login}@${local_archive_host} mkdir &quot;${tmp_dir}/${flavor}&quot;

# Switch to the output directory containing the build results
cd work/output

# Copy the build results to the temporary holding area, if all jobs succeed, these will be dput into the ppa archive.
scp * ${local_archive_login}@${local_archive_host}:${tmp_dir}/${flavor}</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
{% if archive_artifacts %}
    <hudson.tasks.ArtifactArchiver>
      <artifacts>{{ archive_artifacts }}</artifacts>
      <latestOnly>false</latestOnly>
    </hudson.tasks.ArtifactArchiver>
{% endif %}
{% if publish_coverage %}
    <hudson.plugins.cobertura.CoberturaPublisher>
      <coberturaReportFile>{{ publish_coverage }}</coberturaReportFile>
      <onlyStable>false</onlyStable>
      <healthyTarget>
        <targets class="enum-map" enum-type="hudson.plugins.cobertura.targets.CoverageMetric">
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>CONDITIONAL</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>70</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>LINE</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>80</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>METHOD</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>80</int>
          </entry>
        </targets>
      </healthyTarget>
      <unhealthyTarget>
        <targets class="enum-map" enum-type="hudson.plugins.cobertura.targets.CoverageMetric">
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>CONDITIONAL</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>LINE</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>METHOD</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
        </targets>
      </unhealthyTarget>
      <failingTarget>
        <targets class="enum-map" enum-type="hudson.plugins.cobertura.targets.CoverageMetric">
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>CONDITIONAL</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>LINE</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>METHOD</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
        </targets>
      </failingTarget>
      <sourceEncoding>ASCII</sourceEncoding>
    </hudson.plugins.cobertura.CoberturaPublisher>
{% endif %}
{% if publish_junit %}
    <hudson.tasks.junit.JUnitResultArchiver>
      <testResults>{{ publish_junit }}</testResults>
      <keepLongStdio>false</keepLongStdio>
      <testDataPublishers/>
    </hudson.tasks.junit.JUnitResultArchiver>
{% endif %}
{% if publish %}
    <hudson.plugins.build__publisher.BuildPublisher>
      <publishUnstableBuilds>true</publishUnstableBuilds>
      <publishFailedBuilds>true</publishFailedBuilds>
      <postActions class="vector"/>
    </hudson.plugins.build__publisher.BuildPublisher>
{% endif %}
  </publishers>
  <buildWrappers/>
</project>
