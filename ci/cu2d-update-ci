#! /usr/bin/python
"""Create/Update jenkins ci and autolanding jobs for a given stack

- Reads stack configuration from YAML configuration file
- Create/updates the jenkins jobs on the server configured in the credentials
file

"""
# Copyright (C) 2013, Canonical Ltd (http://www.canonical.com/)
#
# Author: TODO
#
# This software is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

import os
import logging
import sys
import yaml
import jinja2
import jenkins
import argparse
from textwrap import dedent

sys.path.append('..')  # add local cupstream2distro

BINDIR = os.path.dirname(__file__)
PREFIX = 'cu2d'

DEFAULT_CREDENTIALS = os.path.expanduser('~/.cu2d.cred')

BASE_CTX = {
    'parallel_jobs': 2,
    'disabled': False,
    'archive_artifacts': False,
    'publish_coverage': False,
    'publish_junit': False,
    'publish': False,
    'hooks': '',
    'hook_location': '',
}

BASE_PARAMS = {}

CI_CTX = {
    'ci_hooks': '',
}

CI_PARAMS = {}

AUTOLANDING_CTX = {
    'autolanding_hooks': '',
    'fasttrack': False,
    'use_description_for_commit': True,
    'acquire_hook_script': 'exit 0',
}

AUTOLANDING_PARAMS = {
    'dput_hooks': '',
    'distributions': '',
    'ppa_target': '',
}


DEFAULT_HOOK_LOCATION = '/tmp/$JOB_NAME-hooks'
ACQUIRE_HOOK_SOURCE_TEMPLATE = "templates/acquire-hooks.sh.tmpl"


class JobParameter(object):
    def __init__(self, name, value, description=None):
        self.name = name
        self.value = value
        self.description = description

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        return '<JobParameter %s: %s [%s]>' % (self.name, self.value,
                                               self.description)


def load_jenkins_credentials(path):
    """ Load Credentials from credentials configuration file """
    if not os.path.exists(path):
        return False

    logging.debug('Loading credentials from %s', path)
    cred = yaml.safe_load(file(path, 'r'))
    return False if not 'jenkins' in cred else cred['jenkins']


def load_stack_cfg(path):
    """ Load stack configuration from file

    TODO: Verify that mandatory settings are defined
    """

    if not os.path.exists(path):
        return False

    logging.debug('Loading stack configuration from %s', path)
    cfg = yaml.safe_load(file(path, 'r'))
    return False if not 'stack' in cfg else cfg['stack']


def setup_job(jenkins_handle, jjenv, jobname, tmplname, ctx, update=False):
    """ Generate template and create or update jenkins job

    :param jenkins_handle: jenkins handle
    :param jjenv: handle to jinja environment
    :param jobname: jenkins' job name
    :param tmplname: template name
    :param ctx: jinja context (dict) to merge with the template
    :param update: update existing job if True
    """
    logging.debug('Generating job: %s', jobname)
    logging.debug('tmplname: %s' % (tmplname))
    logging.debug('ctx: %s' % (ctx))
    tmpl = jjenv.get_template(tmplname)
    jkcfg = tmpl.render(ctx)
    jkcfg = jkcfg.replace(' \n', '')
    jkcfg = jkcfg.replace('>\n\n', '>\n')
    with open('%s.xml' % jobname, 'w') as out_file:
        out_file.write(jkcfg)
    if not jenkins_handle.job_exists(jobname):
        logging.info("Creating Jenkins Job %s ", jobname)
        jenkins_handle.create_job(jobname, jkcfg)
    else:
        if update:
            logging.info("Reconfiguring Jenkins Job %s ", jobname)
            jenkins_handle.reconfig_job(jobname, jkcfg)
        else:
            logging.debug('update set to %s. Skipping reconfiguration of '
                          '%s', update, jobname)
    return True


def add_parameter(ctx, name, value):
    parameter = JobParameter(name, value)
    ctx['parameter_list'].append(parameter)


def create_autolanding_job(data):
    pass


def update_jenkins(jenkins_config, stack, update=False):
    """ Add/update jenkins jobs

    :param jenkins_config: dictionary with the jenkins credentials and config
    :param stack: dictionary with configuration of the stack
    :param update: Update existing jobs if true

    :return: True on success
    """
    if not 'tmpldir' in stack:
        tmpldir = os.path.join(BINDIR, 'templates')
    else:
        tmpldir = stack['tmpldir']

    tmpldir = os.path.abspath(tmpldir)
    logging.debug('Templates directory: %s', tmpldir)

    if not os.path.exists(tmpldir):
        logging.error('Template directory doesn\'t exist')
        return False

    if not jenkins_config['url']:
        logging.error("Please provide a URL to the jenkins instance.")
        sys.exit(1)

    jjenv = jinja2.Environment(loader=jinja2.FileSystemLoader(tmpldir))

    if 'username' in jenkins_config:
        jenkins_handle = jenkins.Jenkins(jenkins_config['url'],
                                         username=jenkins_config['username'],
                                         password=jenkins_config['password'])
    else:
        jenkins_handle = jenkins.Jenkins(jenkins_config['url'])

    basename = [PREFIX, stack['name'], stack['release']]
    subjobs = {}

    # prepare by project
    ctx = dict(BASE_CTX)
    parameters = dict(BASE_PARAMS)
    projects = []
    if stack['projects']:
        for prj in stack['projects']:

            # Create autolanding job
            jobname = "-".join([prj, 'autolanding'])
            ctx.update(AUTOLANDING_CTX)
            parameters.update(AUTOLANDING_PARAMS)

            project = stack['projects'][prj]
            if prj not in ['evemu']:
                continue

            configurations = None

            for key in project:
                data = project[key]

                # Process all the special keys first
                if key == 'fasttrack':
                    ctx[key] = ' --fasttrack'
                elif key == 'hook_source':
                    ctx['hook_location'] = DEFAULT_HOOK_LOCATION
                    hook_script = file.open(
                        ACQUIRE_HOOK_SOURCE_TEMPLATE, 'r').read()
                    hook_script = hook_script.format(
                        DEFAULT_HOOK_LOCATION=DEFAULT_HOOK_LOCATION)
                    ctx['acquire_hook_script'] = hook_script
                elif key in BASE_CTX or key in AUTOLANDING_CTX:
                    # These are added as ctx keys only
                    ctx[key] = data
                elif key == 'configurations':
                    configurations = data
                else:
                    # Everything else is added as a parameter and a ctx key
                    parameters[key] = data

            if 'target_branch' not in parameters:
                parameters['target_branch'] = "lp:" + prj
                logging.info("adding default target_branch: %s" %
                             parameters['target_branch'])
            else:
                logging.info("using target_branch: %s" %
                             parameters['target_branch'])

            if 'autolanding_hooks' in project:
                parameters['hooks'] = ctx['autolanding_hooks']
            elif 'hooks' in project:
                parameters['hooks'] = ctx['hooks']

            ctx['parameter_list'] = []
            for parameter in parameters:
                ctx[parameter] = parameters[parameter]
                add_parameter(ctx, parameter, parameters[parameter])

            sub_jobname_list = []
            for configuration in configurations:
                config_name = configuration.keys()[0]
                print("%s: %s" % (config_name, configuration))
                data = configuration[config_name]
                sub_ctx = dict(ctx)
                sub_ctx['configuration'] = config_name
                sub_ctx['node_label'] = data['node_label']
                sub_jobname = '-'.join([prj, config_name, 'autolanding'])
                sub_jobname_list.append(sub_jobname)
                for c in sub_ctx:
                    print("%s: %s" % (c, sub_ctx[c]))
                setup_job(jenkins_handle, jjenv, sub_jobname, data['template'],
                          sub_ctx, update)
            ctx['builder_list'] = ','.join(sub_jobname_list)
            projects.append(jobname)

            setup_job(jenkins_handle, jjenv, jobname,
                      ctx['autolanding_template'], ctx, update)


def set_logging(debugmode=False):
    """Initialize logging"""
    logging.basicConfig(
        level=logging.DEBUG if debugmode else logging.INFO,
        format="%(asctime)s %(levelname)s %(message)s"
    )
    logging.debug('Debug mode enabled')


def main():
    ''' Main routine '''
    parser = argparse.ArgumentParser(
        description='Create/Update the configuration of the Jenkins jobs '
                    'for a stack.',
        epilog=dedent("""\
            Example:
            To update the indicator stack run the following command:
                $ ./cu2d-update-stack -dU ./etc/indicators-head.cfg
            """),
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-C', '--credentials', metavar='CREDENTIALFILE',
                        default=DEFAULT_CREDENTIALS,
                        help='use Jenkins and load credentials from '
                        'CREDENTIAL FILE\n(default: %s)' % DEFAULT_CREDENTIALS)
    parser.add_argument('-U', '--update-jobs', action='store_true',
                        default=False,
                        help='by default only new jobs are added. This '
                        'option enables \nupdate of existing jobs from '
                        'configuration template.')
    parser.add_argument('-d', '--debug', action='store_true', default=False,
                        help='enable debug mode')
    parser.add_argument('stackcfg', help='Path to a configuration file for '
                        'the stack')

    args = parser.parse_args()
    set_logging(args.debug)

    stackcfg = load_stack_cfg(args.stackcfg)
    if not stackcfg:
        logging.error('Stack configuration failed to load. Aborting!')

    credentials = None
    if args.credentials:
        credentialsfile = args.credentials
        credentials = load_jenkins_credentials(
            os.path.expanduser(credentialsfile))
        if not credentials:
            logging.error('Credentials not found. Aborting!')
            sys.exit(1)
        if not update_jenkins(credentials, stackcfg, args.update_jobs):
            logging.error('Failed to configure jenkins jobs. Aborting!')
            sys.exit(2)


if __name__ == "__main__":
    main()
